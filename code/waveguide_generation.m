function [x,y,h,spectrum,fx] = waveguide_generation(l,dx,dy,xbound,ybound,px,py,A)
% Returns the 2d coherent waveguide generated by point sources specified by
%   their locations px and py,
%   their operating wavelengths l,
%   their sample spacing dx and dy,
%   the aperture size 'bound.'
% If A is given then the magnitude term of green's equation is set to A.
% A 2D fft is run to return the spectrum, by default N = 512.

if nargin < 8
    A = 1;
end
if nargin < 6
    px = 0;
    py = 0;
end

if length(l) == 1 && length(px) > 1
    lambda = zeros(length(px)) + l;
    l = lambda;
end

if length(px) ~= length(py)
    error('x and y point source location vectors are not equal lengths')
end

% number of point sources
n = length(px);

% fft length
N = 512;

% generate 2d coherent waveguide
x = zeros(0);
y = zeros(0);
h = zeros(0);
for i = xbound(1):dx:xbound(2)
    for j = ybound(1):dy:ybound(2)
        x = [x i];
        y = [y j];
        cmplx_val = 0;
        for k = 1:n
            r = sqrt((i-px(k))^2 + (j-py(k))^2)*4;
            lambda = l(k);
            if nargin == 8
                if size(A) == 1
                    cmplx_val = cmplx_val + A*exp(1j*pi*r/lambda);
                else
                    % cmplx_val = cmplx_val + A(k)*(1j*lambda*r)^-0.5*exp(-1j*pi*r/lambda);
                    cmplx_val = cmplx_val + A(k)*exp(-1j*pi*r/lambda);
                end
            else
                cmplx_val = cmplx_val + (1j*lambda*r)^-0.5*exp(1j*pi*r/lambda);
            end
        end
        h = [h cmplx_val];
    end
end

% set infinite magnitudes to zero
infs = find(isinf(h));
for i = 1:length(infs)
    h(infs(i)) = 0;
end
waveguide = fliplr(reshape(h,length(ybound(1):dy:ybound(2)),length(xbound(1):dx:xbound(2))));

% find the spectrum
spectrum = fft2(waveguide,N,N);

% scale the spectrum axes
fx = zeros([1 N]);
for i = 0:N-1
    if i == N/2
        fx(i+1) = 0;
    else
        fx(i+1) = ((N/2) - i)/((N/2)*dx);
    end
end

end